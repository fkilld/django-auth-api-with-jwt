"""
Django settings for djangoauthapi1 project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_zk=9yl=ul!po@_z-)wq&x4=&!(ons2(pogyu52+f7f37v3j$y'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Django CORS headers app - Handles Cross-Origin Resource Sharing (CORS) headers,
    # allowing controlled access to your API from different domains/origins
    'corsheaders',
    
    # Django REST Framework - Powerful toolkit for building Web APIs in Django,
    # provides serialization, authentication, viewsets and other API utilities
    'rest_framework',
    
    # Simple JWT extension for Django REST Framework - Adds JSON Web Token
    # authentication support, enabling secure stateless authentication for API clients
    'rest_framework_simplejwt',
    
    # Custom account app - Contains user authentication, registration and profile
    # management functionality specific to this project
    'account',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'djangoauthapi1.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangoauthapi1.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Django REST Framework configuration settings block
# JWT (JSON Web Token) specific configuration for authentication
# This section defines how API authentication will be handled across the project
REST_FRAMEWORK = {
    # Specifies the default authentication classes that will be used to authenticate API requests
    # This setting overrides the default authentication schemes provided by Django REST Framework
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # Uses Simple JWT package's JWT authentication class
        # This enables token-based authentication using JSON Web Tokens
        # JWT tokens are more secure than regular tokens as they are signed and can contain encoded user data
        # They also enable stateless authentication which is ideal for APIs
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'account.User'

# Email Configuration
# Specify the email backend class to use Django's SMTP email backend for sending emails
# This backend establishes an SMTP connection and handles email delivery through an SMTP server
EMAIL_BACKEND="django.core.mail.backends.smtp.EmailBackend"

# Define the SMTP server host address - using Gmail's SMTP server
# Gmail provides a reliable and widely used SMTP service for sending emails
EMAIL_HOST = 'smtp.gmail.com'

# Set the port number for the SMTP server connection
# Port 587 is used for TLS (Transport Layer Security) encryption with Gmail SMTP
EMAIL_PORT = 587

# Get the email address/username from environment variables for security
# Using environment variables prevents exposing sensitive credentials in code
EMAIL_HOST_USER = os.environ.get('EMAIL_USER')

# Get the email account password from environment variables for security
# The app-specific password should be used instead of the main account password
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_PASS')

# Enable Transport Layer Security (TLS) for secure email transmission
# TLS encrypts the connection between our application and Gmail's SMTP server
EMAIL_USE_TLS = True


# Configuration settings for JSON Web Token (JWT) authentication using Simple JWT library
# These settings control various aspects of token generation, validation and authentication flow
SIMPLE_JWT = {
    # Specifies how long an access token remains valid before expiring (20 minutes)
    # Short lifetime improves security by limiting the window of token misuse
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=20),
    
    # Specifies how long a refresh token remains valid (1 day)
    # Longer lifetime allows users to stay logged in by obtaining new access tokens
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),

    # Defines the type of authorization header expected ('Bearer')
    # Bearer tokens are the industry standard way of carrying JWT tokens
    'AUTH_HEADER_TYPES': ('Bearer',),
    
    # Defines the name of the authorization header in the request
    # Django converts 'Authorization' header to 'HTTP_AUTHORIZATION'
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    
    # Specifies which field to use as the user identifier ('id')
    # This maps to the primary key field in the User model
    'USER_ID_FIELD': 'id',
    
    # Specifies the claim name that will contain the user ID in the JWT
    # This allows extracting user identity from the token payload
    'USER_ID_CLAIM': 'user_id',
    
    # Defines the function used to authenticate users
    # Uses Simple JWT's default authentication rule implementation
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    # Specifies which token classes to use for authentication
    # AccessToken is used for API request authentication
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    
    # Defines the claim name that specifies the token type
    # Helps distinguish between different token types (access vs refresh)
    'TOKEN_TYPE_CLAIM': 'token_type',
    
    # Specifies the class used to create user objects from tokens
    # TokenUser provides a minimal user object based on token claims
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    # Defines the claim name for the unique token identifier
    # JTI (JWT ID) claim provides a unique identifier for each token
    'JTI_CLAIM': 'jti',
}

# Defines how long a password reset link remains valid (900 seconds = 15 minutes)
# Limited timeout period ensures security of password reset process
PASSWORD_RESET_TIMEOUT=900          # 900 Sec = 15 Min

# List of origins allowed to make cross-origin requests to this API
# This enables frontend applications running on these origins to interact with the API
CORS_ALLOWED_ORIGINS = [
    # Allows requests from React development server running on localhost port 3000
    "http://localhost:3000",
    # Allows requests from React development server running on 127.0.0.1 port 3000
    "http://127.0.0.1:3000",
]